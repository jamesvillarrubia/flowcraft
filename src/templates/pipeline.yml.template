name: "Trunkflow Pipeline"

on:
  push:
    branches:
<% for (const branch of branchFlow) { -%>
      - <%= branch %>
<% } -%>
  pull_request:
    branches:
<% for (const branch of branchFlow) { -%>
      - <%= branch %>
<% } -%>
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
        - development
        - staging
        - production
      forceDeploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false

env:
  BRANCH_FLOW: <%= JSON.stringify(branchFlow) %>
  CI_PROVIDER: <%= ciProvider %>

jobs:
  # Detect changes in different domains
  changes:
    uses: ./.github/workflows/job.changes.yml
    secrets: inherit

  # Calculate version bump for releases
  version:
    if: github.ref == 'refs/heads/<%= branchFlow[branchFlow.length - 1] %>' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/job.version.yml
    with:
      baseRef: '<%= branchFlow[branchFlow.length - 1] %>'
    secrets: inherit

  # Create and manage branches
  branch-management:
    if: github.ref == 'refs/heads/<%= branchFlow[0] %>' && needs.changes.outputs.api == 'true'
    needs: [changes]
    uses: ./.github/workflows/job.branch.yml
    with:
      action: 'fast-forward'
      sourceBranch: '<%= branchFlow[0] %>'
      targetBranch: '<%= branchFlow[1] %>'
    secrets: inherit

  # Create PR for non-patch releases
  create-pr:
    if: github.ref == 'refs/heads/<%= branchFlow[branchFlow.length - 2] %>' && needs.version.outputs.versionType != 'patch'
    needs: [version]
    uses: ./.github/workflows/job.createpr.yml
    with:
      sourceBranch: '<%= branchFlow[branchFlow.length - 2] %>'
      targetBranch: '<%= branchFlow[branchFlow.length - 1] %>'
      title: 'Release ${{ needs.version.outputs.nextVersion }}'
      body: |
        ## Release ${{ needs.version.outputs.nextVersion }}
        
        This is an automated release PR for version ${{ needs.version.outputs.nextVersion }}.
        
        **Version Type:** ${{ needs.version.outputs.versionType }}
        **Current Version:** ${{ needs.version.outputs.version }}
        **Next Version:** ${{ needs.version.outputs.nextVersion }}
        
        Please review and approve this release.
      labels: 'release,automated'
    secrets: inherit

  # Create tag for releases
  create-tag:
    if: github.ref == 'refs/heads/<%= branchFlow[branchFlow.length - 1] %>' && needs.version.outputs.versionType == 'patch'
    needs: [version]
    uses: ./.github/workflows/job.tag.yml
    with:
      version: '${{ needs.version.outputs.nextVersion }}'
      tagMessage: 'Release ${{ needs.version.outputs.nextVersion }}'
    secrets: inherit

  # Deploy applications based on changes
  deploy-apps:
    if: always() && (needs.changes.outputs.api == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.libs == 'true' || github.event.inputs.forceDeploy == 'true')
    needs: [changes, version]
    uses: ./.github/workflows/job.apps.yml
    with:
      environment: ${{ github.ref == 'refs/heads/<%= branchFlow[0] %>' && 'development' || github.ref == 'refs/heads/<%= branchFlow[1] %>' && 'staging' || 'production' }}
      domains: ${{ needs.changes.outputs.api == 'true' && 'api' || '' }}${{ needs.changes.outputs.web == 'true' && ',web' || '' }}${{ needs.changes.outputs.libs == 'true' && ',libs' || '' }}
      version: ${{ needs.version.outputs.nextVersion || 'latest' }}
    secrets: inherit

  # Summary job
  summary:
    if: always()
    needs: [changes, version, branch-management, create-pr, create-tag, deploy-apps]
    runs-on: ubuntu-latest
    steps:
    - name: Pipeline Summary
      run: |
        echo "## 🚀 Trunkflow Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Change Detection" >> $GITHUB_STEP_SUMMARY
<% for (const [domainName, domainConfig] of Object.entries(domains)) { -%>
        echo "- **<%= domainName.toUpperCase() %>**: ${{ needs.changes.outputs.<%= domainName %> == 'true' && '✅ Changed' || '❌ No changes' }}" >> $GITHUB_STEP_SUMMARY
<% } -%>
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🏷️ Version Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Version**: ${{ needs.version.outputs.version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Type**: ${{ needs.version.outputs.versionType || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Next Version**: ${{ needs.version.outputs.nextVersion || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔄 Branch Management" >> $GITHUB_STEP_SUMMARY
        echo "- **Fast-forward**: ${{ needs.branch-management.result == 'success' && '✅ Success' || needs.branch-management.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PR Creation**: ${{ needs.create-pr.result == 'success' && '✅ Success' || needs.create-pr.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🏷️ Tag Management" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag Creation**: ${{ needs.create-tag.result == 'success' && '✅ Success' || needs.create-tag.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🚀 Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.deploy-apps.outputs.deploymentStatus || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Domains**: ${{ needs.deploy-apps.outputs.deployedDomains || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.create-pr.result }}" == "success" ]; then
          echo "- Review and approve the release PR" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ needs.create-tag.result }}" == "success" ]; then
          echo "- Tag ${{ needs.version.outputs.nextVersion }} has been created" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ needs.deploy-apps.result }}" == "success" ]; then
          echo "- Applications have been deployed successfully" >> $GITHUB_STEP_SUMMARY
        fi
