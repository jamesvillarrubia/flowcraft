import { PinionContext, toFile, renderTemplate } from '@featherscloud/pinion'

// Template for injectable Trunkflow Pipeline sections
const pipelineInjectionTemplate = (ctx: any) => `# =============================================================================
# TRUNKFLOW PIPELINE SECTIONS
# =============================================================================
# This section is automatically generated by Flowcraft
# DO NOT EDIT MANUALLY - Changes will be overwritten
# =============================================================================

  # =============================================================================
  # PRE-VERSIONING SECTION (USER CUSTOMIZABLE)
  # =============================================================================
  # Add your custom jobs here that should run BEFORE versioning
  # Examples: linting, testing, security scanning, etc.
  # 
  # PLACEHOLDER: Add your pre-versioning jobs here
  # Example:
  #   my-custom-test:
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Run custom tests
  #         run: echo "Running custom tests"
  # =============================================================================

  # =============================================================================
  # VERSIONING SECTION (FLOWCRAFT MANAGED)
  # =============================================================================
  # Detect changes in different domains
  changes:
    uses: ./.github/workflows/job.changes.yml
    secrets: inherit

  # Calculate version bump for releases
  versioning:
    needs: [changes]
    if: github.ref == 'refs/heads/${ctx.branchFlow[ctx.branchFlow.length - 1]}' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/job.version.yml
    with:
      baseRef: '${ctx.branchFlow[ctx.branchFlow.length - 1]}'
    secrets: inherit

  # =============================================================================
  # POST-VERSIONING SECTION (USER CUSTOMIZABLE)
  # =============================================================================
  # Add your custom jobs here that should run AFTER versioning
  # Examples: deployments, notifications, etc.
  # 
  # PLACEHOLDER: Add your post-versioning jobs here
  # Example:
  #   my-custom-deploy:
  #     needs: [versioning]
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Deploy to custom environment
  #         run: echo "Deploying with version \${{ needs.versioning.outputs.version }}"
  # =============================================================================

  # =============================================================================
  # FLOWCRAFT MANAGED SECTIONS (DO NOT EDIT)
  # =============================================================================
  # Create and manage branches
  branch-management:
    if: github.ref == 'refs/heads/${ctx.branchFlow[0]}' && needs.changes.outputs.api == 'true'
    needs: [changes]
    uses: ./.github/workflows/job.branch.yml
    with:
      action: 'fast-forward'
      sourceBranch: '${ctx.branchFlow[0]}'
      targetBranch: '${ctx.branchFlow[1]}'
    secrets: inherit

  # Create PR for non-patch releases
  create-pr:
    if: github.ref == 'refs/heads/${ctx.branchFlow[ctx.branchFlow.length - 2]}' && needs.versioning.outputs.versionType != 'patch'
    needs: [versioning]
    uses: ./.github/workflows/job.createpr.yml
    with:
      sourceBranch: '${ctx.branchFlow[ctx.branchFlow.length - 2]}'
      targetBranch: '${ctx.branchFlow[ctx.branchFlow.length - 1]}'
      title: 'Release \${{ needs.versioning.outputs.nextVersion }}'
      body: |
        ## Release \${{ needs.versioning.outputs.nextVersion }}
        
        This is an automated release PR for version \${{ needs.versioning.outputs.nextVersion }}.
        
        **Version Type:** \${{ needs.versioning.outputs.versionType }}
        **Current Version:** \${{ needs.versioning.outputs.version }}
        **Next Version:** \${{ needs.versioning.outputs.nextVersion }}
        
        Please review and approve this release.
      labels: 'release,automated'
    secrets: inherit

  # Create tag for releases
  create-tag:
    if: github.ref == 'refs/heads/${ctx.branchFlow[ctx.branchFlow.length - 1]}' && needs.versioning.outputs.versionType == 'patch'
    needs: [versioning]
    uses: ./.github/workflows/job.tag.yml
    with:
      version: '\${{ needs.versioning.outputs.nextVersion }}'
      tagMessage: 'Release \${{ needs.versioning.outputs.nextVersion }}'
    secrets: inherit

  # Summary job
  summary:
    if: always()
    needs: [changes, versioning, branch-management, create-pr, create-tag]
    runs-on: ubuntu-latest
    steps:
    - name: Pipeline Summary
      run: |
        echo "## 🚀 Trunkflow Pipeline Summary" >> \$GITHUB_STEP_SUMMARY
        echo "" >> \$GITHUB_STEP_SUMMARY
        
        echo "### 📊 Change Detection" >> \$GITHUB_STEP_SUMMARY
<% for (const [domainName, domainConfig] of Object.entries(ctx.domains)) { -%>
        echo "- **<%= domainName.toUpperCase() %>**: \${{ needs.changes.outputs.<%= domainName %> == 'true' && '✅ Changed' || '❌ No changes' }}" >> \$GITHUB_STEP_SUMMARY
<% } -%>
        echo "" >> \$GITHUB_STEP_SUMMARY
        
        echo "### 🏷️ Version Information" >> \$GITHUB_STEP_SUMMARY
        echo "- **Current Version**: \${{ needs.versioning.outputs.version || 'N/A' }}" >> \$GITHUB_STEP_SUMMARY
        echo "- **Version Type**: \${{ needs.versioning.outputs.versionType || 'N/A' }}" >> \$GITHUB_STEP_SUMMARY
        echo "- **Next Version**: \${{ needs.versioning.outputs.nextVersion || 'N/A' }}" >> \$GITHUB_STEP_SUMMARY
        echo "" >> \$GITHUB_STEP_SUMMARY
        
        echo "### 🔄 Branch Management" >> \$GITHUB_STEP_SUMMARY
        echo "- **Fast-forward**: \${{ needs.branch-management.result == 'success' && '✅ Success' || needs.branch-management.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> \$GITHUB_STEP_SUMMARY
        echo "- **PR Creation**: \${{ needs.create-pr.result == 'success' && '✅ Success' || needs.create-pr.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> \$GITHUB_STEP_SUMMARY
        echo "" >> \$GITHUB_STEP_SUMMARY
        
        echo "### 🏷️ Tag Management" >> \$GITHUB_STEP_SUMMARY
        echo "- **Tag Creation**: \${{ needs.create-tag.result == 'success' && '✅ Success' || needs.create-tag.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> \$GITHUB_STEP_SUMMARY
        echo "" >> \$GITHUB_STEP_SUMMARY
        
        echo "### 📋 Next Steps" >> \$GITHUB_STEP_SUMMARY
        if [ "\${{ needs.create-pr.result }}" == "success" ]; then
          echo "- Review and approve the release PR" >> \$GITHUB_STEP_SUMMARY
        fi
        if [ "\${{ needs.create-tag.result }}" == "success" ]; then
          echo "- Tag \${{ needs.versioning.outputs.nextVersion }} has been created" >> \$GITHUB_STEP_SUMMARY
        fi

# =============================================================================
# END OF TRUNKFLOW PIPELINE SECTIONS
# =============================================================================`

export const generate = (ctx: PinionContext) =>
  Promise.resolve(ctx)
    .then(renderTemplate(pipelineInjectionTemplate, toFile('.github/workflows/trunkflow-sections.yml')))
