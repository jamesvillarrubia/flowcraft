name: "Pipeline"
run-name: "${{ github.ref_name }} #${{ inputs.run_number || github.run_number }}${{ inputs.version && format(' - {0}', inputs.version) || '' }}"
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
      run_number:
        description: The original run number from develop branch
        required: false
        type: string
  push:
    branches:
      - develop
      - staging
      - main
jobs:

  #=============================================================================
  # CHANGES DETECTION
  #=============================================================================
  changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/detect-changes
        id: detect
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
    outputs:
      cicd: ${{ steps.detect.outputs.cicd }}
      core: ${{ steps.detect.outputs.core }}
      test: ${{ steps.detect.outputs.test }}

  #=============================================================================
  # TESTING JOBS
  #=============================================================================
  test-cicd:
    needs: changes
    if: ${{ needs.changes.outputs.cicd == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # TODO: Replace with your cicd test logic
      - name: Run cicd tests
        run: |
          echo "Running tests for cicd domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=cicd

  test-core:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # TODO: Replace with your core test logic
      - name: Run core tests
        run: |
          echo "Running tests for core domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=core

  test-test:
    needs: changes
    if: ${{ needs.changes.outputs.test == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # TODO: Replace with your test test logic
      - name: Run test tests
        run: |
          echo "Running tests for test domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=test

  version:
    if: ${{
        always() && (
          needs.test-cicd.result == 'success' ||
          needs.test-core.result == 'success' ||
          needs.test-test.result == 'success'
        ) &&
        (
          needs.test-cicd.result != 'failure' &&
          needs.test-core.result != 'failure' &&
          needs.test-test.result != 'failure'
        )
      }}
    needs: [ changes, test-cicd, test-core, test-test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/calculate-version
        id: version
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
    outputs:
      version: ${{ steps.version.outputs.version }}

  #=============================================================================
  # DEPLOYMENT JOBS
  #=============================================================================
  deploy-core:
    needs: [ changes, version ]
    if: ${{ always() && needs.changes.outputs.core == 'true'  && needs.version.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy core
        run: |
          echo "Deploying core"
          echo "Replace this with your actual deploy commands"
          # Example: npm deploy -- --testPathPattern=core

  #=============================================================================
  # REMOTE TESTING JOBS
  #=============================================================================
  remote-test-core:
    needs: [ deploy-core, changes ]
    if: ${{ always() && needs.deploy-core.result == 'success' && needs.changes.outputs.core == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Test core
        run: |
          echo "Testing core remotely"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=core

  #=============================================================================
  # TAG & PROMOTE
  #=============================================================================
  tag:
    # Needs all deploy and/or remote test jobs to succeed or be skipped
    # Needs at least one domain to succeed
    needs: [ version, deploy-core, remote-test-core ]
    if: ${{
        always() &&
        github.ref_name == 'develop' &&
        needs.version.result == 'success' &&
        (
        needs.deploy-core.result != 'failure' &&
        needs.remote-test-core.result != 'failure'
      ) &&
        (
        needs.deploy-core.result == 'success' ||
        needs.remote-test-core.result == 'success'
      )
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/create-tag
        with:
          version: ${{ needs.version.outputs.version }}
  #=============================================================================
  # PROMOTION JOB
  #=============================================================================
  promote:
    # Only runs on push or manual workflow_dispatch events to branches that can promote
    # Waits for version/tag if they run, but doesn't fail if they're skipped
    # Needs all deploy and/or remote test jobs to succeed
    if: ${{
        always() &&
        (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      ) &&
        (
        needs.version.result == 'success' ||
        needs.version.result == 'skipped'
      ) &&
        (
        needs.tag.result == 'success' ||
        needs.tag.result == 'skipped'
      ) &&
        (
        github.ref_name == 'develop' ||
        github.ref_name == 'staging'
      )
      }}
    needs: [ version, tag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/promote-branch
        with:
          sourceBranch: ${{ github.ref_name }}
          version: ${{ needs.version.outputs.version }}
          run_number: ${{ inputs.run_number || github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}

  #=============================================================================
  # RELEASE & PUBLISH JOBS (Main Branch Only)
  #=============================================================================
  release:
    # Create GitHub release on main branch after successful tests and versioning
    if: ${{
        always() &&
        github.ref_name == 'main' &&
        (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      ) &&
        needs.version.result == 'success' &&
        (
        needs.tag.result == 'success' ||
        needs.tag.result == 'skipped'
      )
      }}
    needs: [ version, tag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          echo "Creating GitHub release for $VERSION"

          # Generate release notes from commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            RELEASE_NOTES=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges)
          else
            RELEASE_NOTES=$(git log --pretty=format:"- %s" --no-merges)
          fi

          # Create release
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes "$RELEASE_NOTES" \
            --latest

  publish:
    # Publish to npm on main branch after successful release
    if: ${{
        always() &&
        github.ref_name == 'main' &&
        (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      ) &&
        needs.release.result == 'success'
      }}
    needs: [ release ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: npm ci
      - name: Build package
        run: npm run build
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
