name: "Pipeline"

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_call:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    branches:
      - develop
      - staging
      - main

jobs:

  
  #=============================================================================
  # CHANGES DETECTION
  #=============================================================================
  changes:
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/detect-changes
        id: detect
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
    outputs:
      cicd: ${{ steps.detect.outputs.cicd }}
      core: ${{ steps.detect.outputs.core }}
      test: ${{ steps.detect.outputs.test }}
  test-test:
    needs: changes
    if: ${{ needs.changes.outputs.test == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # TODO: Replace with your test test logic
      - name: Run test tests
        run: |
          echo "Running tests for test domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=test

  #=============================================================================
  # TESTING JOBS
  #=============================================================================
  test-cicd:
    needs: changes
    if: ${{ needs.changes.outputs.cicd == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # TODO: Replace with your cicd test logic
      - name: Run cicd tests
        run: |
          echo "Running tests for cicd domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=cicd
  test-core:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # TODO: Replace with your core test logic
      - name: Run core tests
        run: |
          echo "Running tests for core domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=core

  #=============================================================================
  # VERSIONING
  #=============================================================================
  version:
    if: ${{ github.ref_name == 'develop' && always() && needs.test-cicd.result != 'failure' && needs.test-core.result != 'failure' && needs.test-test.result != 'failure' }}
    needs: [ changes, test-cicd, test-core, test-test ]
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/calculate-version
        id: version
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
    outputs:
      version: ${{ steps.version.outputs.version }}

  #=============================================================================
  # TAG & PROMOTE
  #=============================================================================
  tag:
    if: github.ref_name == 'develop'
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/create-tag
        with:
          version: ${{ needs.version.outputs.version }}

  #=============================================================================
  # PROMOTION JOB
  #=============================================================================
  promote:
    # Only runs on push events (not PRs) to branches that can promote
    # Waits for version/tag if they run, but doesn't fail if they're skipped
    if: ${{ always() && github.event_name == 'push' && (github.ref_name == 'develop' || github.ref_name == 'staging') && needs.version.result != 'failure' && needs.tag.result != 'failure' }}
    needs: [ changes, version, tag ]
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/promote-branch
        with:
          sourceBranch: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
