name: 'Calculate Version'
description: 'Calculate semantic version using release-it and conventional commits'
author: 'Flowcraft'

inputs:
  baseRef:
    description: 'Base reference for version calculation'
    required: false
    default: 'main'

outputs:
  nextVersion:
    description: 'The determined version'
    value: ${{ steps.set_version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get existing version tag
      id: get_version_old
      shell: bash
      run: |
        set -x  # Enable debugging output
        # Get the current commit hash
        git rev-parse HEAD
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "Current commit hash: $COMMIT_HASH"
        
        # Check for tags on the current commit
        TAG=$(git tag --points-at $COMMIT_HASH | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+\$' || true)
        echo "Tags found: $TAG"
        
        if [ -z "$TAG" ]; then
          echo "No existing tag found on the current commit"
        else
          echo "Found existing tag: $TAG"
          echo "version=$TAG" >> $GITHUB_OUTPUT
        fi

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8

    - name: Install dependencies
      shell: bash
      run: pnpm install

    - name: Get version
      if: steps.get_version_old.outputs.version == ''
      id: get_version_new
      shell: bash
      run: |
        VERSION=$(npx release-it --ci --release-version 2>&1 || echo "")
        if [[ "$VERSION" == *"No new version to release"* || -z "$VERSION" ]]; then
          echo "No new version to release"
          echo "VERSION=" >> $GITHUB_ENV
          echo "version=" >> $GITHUB_OUTPUT
        else
          echo "New version to release: $VERSION"
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Set version output
      id: set_version
      shell: bash
      run: |
        if [ -n "${{ steps.get_version_old.outputs.version }}" ]; then
          echo "Using old version: ${{ steps.get_version_old.outputs.version }}"
          echo "version=${{ steps.get_version_old.outputs.version }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ steps.get_version_new.outputs.version }}" ]; then
          echo "Using new version: ${{ steps.get_version_new.outputs.version }}"
          echo "version=${{ steps.get_version_new.outputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "No version determined"
          echo "version=" >> $GITHUB_OUTPUT
        fi

    - name: Output version
      shell: bash
      run: |
        echo "Version determined: ${{ steps.set_version.outputs.version }}"